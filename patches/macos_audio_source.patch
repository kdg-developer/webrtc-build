diff --git a/api/task_queue/BUILD.gn b/api/task_queue/BUILD.gn
index 1072057e3f..5e71e60954 100644
--- a/api/task_queue/BUILD.gn
+++ b/api/task_queue/BUILD.gn
@@ -78,3 +78,3 @@ rtc_library("default_task_queue_factory") {
   visibility = [ "*" ]
-  if (!is_ios && !is_android) {
+  if (!is_mac && !is_ios && !is_android) {
     poisonous = [ "default_task_queue" ]
diff --git a/sdk/objc/api/peerconnection/RTCAudioDeviceModule+Private.h b/sdk/objc/api/peerconnection/RTCAudioDeviceModule+Private.h
new file mode 100644
index 0000000000..a01500b190
--- /dev/null
+++ b/sdk/objc/api/peerconnection/RTCAudioDeviceModule+Private.h
@@ -0,0 +1,28 @@
+/*
+ *  Copyright 2019 pixiv Inc. All Rights Reserved.
+ *
+ *  Use of this source code is governed by a license that can be
+ *  found in the LICENSE.pixiv file in the root of the source tree.
+ */
+
+#import "RTCAudioDeviceModule.h"
+
+#if defined(WEBRTC_IOS)
+#include "sdk/objc/native/src/audio/audio_device_module_ios.h"
+#elif defined(WEBRTC_MAC)
+#include "sdk/objc/native/src/audio/audio_device_module_mac.h"
+#endif
+
+NS_ASSUME_NONNULL_BEGIN
+
+@interface RTCAudioDeviceModule ()
+#if defined(WEBRTC_IOS)
+@property(nonatomic, readonly) rtc::scoped_refptr<webrtc::ios_adm::AudioDeviceModuleIOS>
+    nativeModule;
+#elif defined(WEBRTC_MAC)
+@property(nonatomic, readonly) rtc::scoped_refptr<webrtc::mac_adm::AudioDeviceModuleMac>
+    nativeModule;
+#endif
+@end
+
+NS_ASSUME_NONNULL_END
diff --git a/sdk/objc/api/peerconnection/RTCAudioDevice.h b/sdk/objc/api/peerconnection/RTCAudioDevice.h
new file mode 100644
index 0000000000..c4bb2fd292
--- /dev/null
+++ b/sdk/objc/api/peerconnection/RTCAudioDevice.h
@@ -0,0 +1,26 @@
+#import <Foundation/Foundation.h>
+
+#import "RTCMacros.h"
+
+NS_ASSUME_NONNULL_BEGIN
+
+RTC_OBJC_EXPORT
+@interface RTC_OBJC_TYPE(RTCAudioDevice) : NSObject {
+  NSString *deviceName;
+  NSString *uniqueId;
+  int index;
+}
+
+@property(nonatomic, copy) NSString *deviceName;
+
+@property(nonatomic, copy) NSString *uniqueId;
+
+@property int index;
+
+- (instancetype)initWithDeviceName:(NSString *)deviceName
+                          uniqueId: (NSString *)uniqueId
+                            index: (uint16_t)index;
+
+@end
+
+NS_ASSUME_NONNULL_END
diff --git a/sdk/objc/api/peerconnection/RTCAudioDevice.mm b/sdk/objc/api/peerconnection/RTCAudioDevice.mm
new file mode 100644
index 0000000000..c655420746
--- /dev/null
+++ b/sdk/objc/api/peerconnection/RTCAudioDevice.mm
@@ -0,0 +1,20 @@
+#import "RTCAudioDevice.h"
+
+@implementation RTC_OBJC_TYPE(RTCAudioDevice) : NSObject
+
+@synthesize deviceName = _deviceName;
+@synthesize uniqueId = _uniqueId;
+@synthesize index = _index;
+
+- (instancetype)initWithDeviceName:(NSString *)deviceName
+                          uniqueId: (NSString *)uniqueId
+                            index: (uint16_t)index {
+    if (self = [super init]) {
+        _deviceName = deviceName;
+        _uniqueId = uniqueId;
+        _index = index;
+    }
+    return self;
+}
+
+@end
diff --git a/sdk/objc/api/peerconnection/RTCAudioDeviceModule.h b/sdk/objc/api/peerconnection/RTCAudioDeviceModule.h
new file mode 100644
index 0000000000..d1db2f1faa
--- /dev/null
+++ b/sdk/objc/api/peerconnection/RTCAudioDeviceModule.h
@@ -0,0 +1,104 @@
+/*
+ *  Copyright 2019 pixiv Inc. All Rights Reserved.
+ *
+ *  Use of this source code is governed by a license that can be
+ *  found in the LICENSE.pixiv file in the root of the source tree.
+ */
+
+#import <CoreMedia/CoreMedia.h>
+#import <Foundation/Foundation.h>
+
+#import "RTCMacros.h"
+#import "RTCAudioDevice.h"
+
+NS_ASSUME_NONNULL_BEGIN
+
+RTC_OBJC_EXPORT
+@interface RTC_OBJC_TYPE (RTCAudioDeviceModule) : NSObject
+
+@property(nonatomic, assign) OSType audioUnitSubType;
+
+// Main initializaton and termination
+- (int32_t) initModule;
+- (int32_t) terminateModule;
+- (bool) initialized;
+
+// Device enumeration
+- (uint16_t) playoutDevices;
+- (uint16_t) recordingDevices;
+
+// Device selection
+- (int32_t) setPlayoutDevice:(uint16_t)index;
+- (int32_t) setRecordingDevice:(uint16_t)index;
+- (RTCAudioDevice *) playoutDeviceName:(uint16_t)index;
+- (RTCAudioDevice *) recordingDeviceName:(uint16_t)index;
+- (NSArray<RTCAudioDevice *>*) playoutDeviceList;
+- (NSArray<RTCAudioDevice *>*) recordingDeviceList;
+
+// Audio transport initialization
+- (bool) playoutIsAvailable;
+- (int32_t) initPlayout;
+- (bool) playoutIsInitialized;
+- (bool) recordingIsAvailable;
+- (int32_t) initRecording;
+- (bool) recordingIsInitialized;
+
+// Audio transport control
+- (int32_t) startPlayout;
+- (int32_t) stopPlayout;
+- (bool) playing;
+- (int32_t) startRecording;
+- (int32_t) stopRecording;
+- (bool) recording;
+
+// Audio mixer initialization
+- (int32_t) initSpeaker;
+- (bool) speakerIsInitialized;
+- (int32_t) initMicrophone;
+- (bool) microphoneIsInitialized;
+
+// Speaker volume controls
+- (bool) speakerVolumeIsAvailable;
+- (int32_t) setSpeakerVolume:(uint32_t)volume;
+- (int32_t) speakerVolume;
+- (int32_t) maxSpeakerVolume;
+- (int32_t) minSpeakerVolume;
+
+// Microphone volume controls
+- (bool) microphoneVolumeIsAvailable;
+- (int32_t) setMicrophoneVolume:(uint32_t)volume;
+- (int32_t) microphoneVolume;
+- (int32_t) maxMicrophoneVolume;
+- (int32_t) minMicrophoneVolume;
+
+// Speaker mute control
+- (bool) speakerMuteIsAvailable;
+- (int32_t) setSpeakerMute:(BOOL)enable;
+- (bool) speakerMute;
+
+// Microphone mute control
+- (bool) microphoneMuteIsAvailable;
+- (int32_t) setMicrophoneMute:(bool)enable;
+- (bool) microphoneMute;
+
+// Stereo support
+- (bool) stereoPlayoutIsAvailable;
+- (int32_t) setStereoPlayout:(bool)enable;
+- (bool) stereoPlayout;
+- (bool) stereoRecordingIsAvailable;
+- (int32_t) setStereoRecording:(bool)enable;
+- (bool) stereoRecording;
+
+// Delay information and control
+- (bool) builtInAECIsAvailable;
+- (int32_t) enableBuiltInAEC:(bool)enable;
+- (bool) builtInAGCIsAvailable;
+- (int32_t) enableBuiltInAGC:(bool)enable;
+- (bool) builtInNSIsAvailable;
+- (int32_t) enableBuiltInNS:(bool)enable;
+
+- (void) deliverRecordedData:(CMSampleBufferRef)sampleBuffer;
+
+@end
+
+NS_ASSUME_NONNULL_END
\ No newline at end of file
diff --git a/sdk/objc/api/peerconnection/RTCAudioDeviceModule.mm b/sdk/objc/api/peerconnection/RTCAudioDeviceModule.mm
new file mode 100644
index 0000000000..663aaef6aa
--- /dev/null
+++ b/sdk/objc/api/peerconnection/RTCAudioDeviceModule.mm
@@ -0,0 +1,356 @@
+/*
+ *  Copyright 2019 pixiv Inc. All Rights Reserved.
+ *
+ *  Use of this source code is governed by a license that can be
+ *  found in the LICENSE.pixiv file in the root of the source tree.
+ */
+
+#include <AudioUnit/AudioUnit.h>
+
+#import "RTCAudioDeviceModule+Private.h"
+
+#include "modules/audio_device/audio_device_generic.h"
+#include "rtc_base/ref_counted_object.h"
+
+@implementation RTC_OBJC_TYPE(RTCAudioDeviceModule) {
+  #if defined(WEBRTC_IOS)
+  rtc::scoped_refptr<webrtc::ios_adm::AudioDeviceModuleIOS> _nativeModule;
+  #elif defined(WEBRTC_MAC)
+  rtc::scoped_refptr<webrtc::mac_adm::AudioDeviceModuleMac> _nativeModule;
+  #endif
+}
+
+- (instancetype)init {
+  self = [super init];
+  #if defined(WEBRTC_IOS)
+  _nativeModule = new rtc::RefCountedObject<webrtc::ios_adm::AudioDeviceModuleIOS>(false);
+  #elif defined(WEBRTC_MAC)
+  _nativeModule = new rtc::RefCountedObject<webrtc::mac_adm::AudioDeviceModuleMac>(false);
+  #endif
+  return self;
+}
+
+// Main initializaton and termination
+- (int32_t) initModule {
+  return _nativeModule->Init();
+}
+
+- (int32_t) terminateModule {
+  return _nativeModule->Terminate();
+}
+
+- (bool) initialized {
+  return _nativeModule->Initialized();
+}
+
+// Device enumeration
+- (uint16_t) playoutDevices {
+  return _nativeModule->PlayoutDevices();
+}
+
+- (uint16_t) recordingDevices {
+  return _nativeModule->RecordingDevices();
+}
+
+- (RTCAudioDevice *) playoutDeviceName:(uint16_t)index {
+  char deviceName[webrtc::kAdmMaxDeviceNameSize];
+  char uniqueId[webrtc::kAdmMaxGuidSize];
+  _nativeModule->PlayoutDeviceName(index, deviceName, uniqueId);
+  NSString *name = [NSString stringWithUTF8String: deviceName];
+  NSString *uid = [NSString stringWithUTF8String: uniqueId];
+  return [[RTCAudioDevice alloc] initWithDeviceName:name
+                                           uniqueId:uid
+                                              index:index];
+}
+
+- (RTCAudioDevice *) recordingDeviceName:(uint16_t)index {
+  char deviceName[webrtc::kAdmMaxDeviceNameSize];
+  char uniqueId[webrtc::kAdmMaxGuidSize];
+  _nativeModule->RecordingDeviceName(index, deviceName, uniqueId);
+  NSString *name = [NSString stringWithUTF8String: deviceName];
+  NSString *uid = [NSString stringWithUTF8String: uniqueId];
+  return [[RTCAudioDevice alloc] initWithDeviceName:name
+                                           uniqueId:uid
+                                              index:index];
+}
+
+- (NSArray<RTCAudioDevice *>*) playoutDeviceList {
+  NSMutableArray *devices = [NSMutableArray array];
+  uint16_t deviceNum = [self playoutDevices];
+  for (int i = 0; i < deviceNum; i++) {
+    [devices addObject:[self playoutDeviceName:i]];
+  }
+  return devices;
+}
+
+- (NSArray<RTCAudioDevice *>*) recordingDeviceList {
+  NSMutableArray *devices = [NSMutableArray array];
+  uint16_t deviceNum = [self recordingDevices];
+  for (int i = 0; i < deviceNum; i++) {
+    [devices addObject:[self recordingDeviceName:i]];
+  }
+  return devices;
+}
+
+// Device selection
+- (int32_t) setPlayoutDevice:(uint16_t)index {
+  return _nativeModule->SetPlayoutDevice(index);
+}
+
+- (int32_t) setRecordingDevice:(uint16_t)index {
+  return _nativeModule->SetRecordingDevice(index);
+}
+
+// Audio transport initialization
+- (bool) playoutIsAvailable {
+  bool available = false;
+  _nativeModule->PlayoutIsAvailable(&available);
+  return available;
+}
+
+- (int32_t) initPlayout {
+  return _nativeModule->InitPlayout();
+}
+
+- (bool) playoutIsInitialized {
+  return _nativeModule->PlayoutIsInitialized();
+}
+
+- (bool) recordingIsAvailable {
+  bool available = false;
+  _nativeModule->RecordingIsAvailable(&available);
+  return available;
+}
+
+- (int32_t) initRecording {
+  return _nativeModule->InitRecording();
+}
+
+- (bool) recordingIsInitialized {
+  return _nativeModule->RecordingIsInitialized();
+}
+
+// Audio transport control
+- (int32_t) startPlayout {
+  return _nativeModule->StartPlayout();
+}
+
+- (int32_t) stopPlayout {
+  return _nativeModule->StopPlayout();
+}
+
+- (bool) playing {
+  return _nativeModule->Playing();
+}
+
+- (int32_t) startRecording {
+  return _nativeModule->StartRecording();
+}
+
+- (int32_t) stopRecording {
+  return _nativeModule->StopRecording();
+}
+
+- (bool) recording {
+  return _nativeModule->Recording();
+}
+
+// Audio mixer initialization
+- (int32_t) initSpeaker {
+  return _nativeModule->InitSpeaker();
+}
+
+- (bool) speakerIsInitialized {
+  return _nativeModule->SpeakerIsInitialized();
+}
+
+- (int32_t) initMicrophone {
+  return _nativeModule->InitMicrophone();
+}
+
+- (bool) microphoneIsInitialized {
+  return _nativeModule->MicrophoneIsInitialized();
+}
+
+// Speaker volume controls
+- (bool) speakerVolumeIsAvailable {
+  bool available = false;
+  _nativeModule->SpeakerVolumeIsAvailable(&available);
+  return available;
+}
+
+- (int32_t) setSpeakerVolume:(uint32_t)volume {
+  return _nativeModule->SetSpeakerVolume(volume);
+}
+
+- (int32_t) speakerVolume {
+  uint32_t volume(0);
+  _nativeModule->SpeakerVolume(&volume);
+  return volume;
+}
+
+- (int32_t) maxSpeakerVolume {
+  uint32_t maxVolume(0);
+  _nativeModule->MaxSpeakerVolume(&maxVolume);
+  return maxVolume;
+}
+
+- (int32_t) minSpeakerVolume {
+  uint32_t minVolume(0);
+  _nativeModule->MinSpeakerVolume(&minVolume);
+  return minVolume;
+}
+
+// Microphone volume controls
+- (bool) microphoneVolumeIsAvailable {
+  bool available = false;
+  _nativeModule->MicrophoneVolumeIsAvailable(&available);
+  return available;
+}
+
+- (int32_t) setMicrophoneVolume:(uint32_t)volume {
+  return _nativeModule->SetMicrophoneVolume(volume);
+}
+
+- (int32_t) microphoneVolume {
+  uint32_t volume(0);
+  _nativeModule->MicrophoneVolume(&volume);
+  return volume;
+}
+
+- (int32_t) maxMicrophoneVolume {
+  uint32_t maxVolume(0);
+  _nativeModule->MaxMicrophoneVolume(&maxVolume);
+  return maxVolume;
+}
+
+- (int32_t) minMicrophoneVolume {
+  uint32_t minVolume(0);
+  _nativeModule->MinMicrophoneVolume(&minVolume);
+  return minVolume;
+}
+
+// Speaker mute control
+- (bool) speakerMuteIsAvailable {
+  bool available = false;
+  _nativeModule->SpeakerMuteIsAvailable(&available);
+  return available;
+}
+
+- (int32_t) setSpeakerMute:(BOOL)enable {
+  return _nativeModule->SetSpeakerMute(enable);
+}
+
+- (bool) speakerMute {
+  bool enable = false;
+  _nativeModule->SpeakerMute(&enable);
+  return enable;
+}
+
+// Microphone mute control
+- (bool) microphoneMuteIsAvailable {
+  bool available = false;
+  _nativeModule->MicrophoneMuteIsAvailable(&available);
+  return available;
+}
+
+- (int32_t) setMicrophoneMute:(bool)enable {
+  return _nativeModule->SetMicrophoneMute(enable);
+}
+
+- (bool) microphoneMute {
+  bool enable = false;
+  _nativeModule->MicrophoneMute(&enable);
+  return enable;
+}
+
+// Stereo support
+- (bool) stereoPlayoutIsAvailable {
+  bool available = false;
+  _nativeModule->StereoPlayoutIsAvailable(&available);
+  return available;
+}
+
+- (int32_t) setStereoPlayout:(bool)enable {
+  return _nativeModule->SetStereoPlayout(enable);
+}
+
+- (bool) stereoPlayout {
+  bool enable = false;
+  _nativeModule->StereoPlayout(&enable);
+  return enable;
+}
+
+- (bool) stereoRecordingIsAvailable {
+  bool available = false;
+  _nativeModule->StereoRecordingIsAvailable(&available);
+  return available;
+}
+
+- (int32_t) setStereoRecording:(bool)enable {
+  return _nativeModule->SetStereoRecording(enable);
+}
+
+- (bool) stereoRecording {
+  bool enable = false;
+  _nativeModule->StereoRecording(&enable);
+  return enable;
+}
+
+// Delay information and control
+- (bool) builtInAECIsAvailable {
+  return _nativeModule->BuiltInAECIsAvailable();
+}
+
+- (int32_t) enableBuiltInAEC:(bool)enable {
+  return _nativeModule->EnableBuiltInAEC(enable);
+}
+
+- (bool) builtInAGCIsAvailable {
+  return _nativeModule->BuiltInAGCIsAvailable();
+}
+
+- (int32_t) enableBuiltInAGC:(bool)enable {
+  return _nativeModule->EnableBuiltInAGC(enable);
+}
+
+- (bool) builtInNSIsAvailable {
+  return _nativeModule->BuiltInNSIsAvailable();
+}
+
+- (int32_t) enableBuiltInNS:(bool)enable {
+  return _nativeModule->EnableBuiltInNS(enable);
+}
+
+- (void)deliverRecordedData:(CMSampleBufferRef)sampleBuffer {
+  #if defined(WEBRTC_IOS)
+  _nativeModule->OnDeliverRecordedExternalData(sampleBuffer);
+  #endif
+}
+
+- (void)setAudioUnitSubType:(OSType)audioUnitSubType {
+  #if defined(WEBRTC_IOS)
+  _nativeModule->SetAudioUnitSubType(audioUnitSubType);
+  #endif
+}
+
+- (OSType)audioUnitSubType {
+  #if defined(WEBRTC_IOS)
+  return _nativeModule->GetAudioUnitSubType();
+  #else
+  return kAudioUnitSubType_VoiceProcessingIO;
+  #endif
+}
+
+#pragma mark - Private
+
+#if defined(WEBRTC_IOS)
+- (rtc::scoped_refptr<webrtc::ios_adm::AudioDeviceModuleIOS>)nativeModule {
+  return _nativeModule;
+}
+#elif defined(WEBRTC_MAC)
+- (rtc::scoped_refptr<webrtc::mac_adm::AudioDeviceModuleMac>)nativeModule {
+  return _nativeModule;
+}
+#endif
+@end
\ No newline at end of file
diff --git a/sdk/objc/native/src/audio/audio_device_ios.h b/sdk/objc/native/src/audio/audio_device_ios.h
index a57e719eab..a85642cb42 100644
--- a/sdk/objc/native/src/audio/audio_device_ios.h
+++ b/sdk/objc/native/src/audio/audio_device_ios.h
@@ -13,2 +13,3 @@
 
+#include <CoreMedia/CoreMedia.h>
 #include <memory>
@@ -147,2 +148,3 @@ class AudioDeviceIOS : public AudioDeviceGeneric,
   void OnChangedOutputVolume() override;
+  void OnDeliverRecordedExternalData(CMSampleBufferRef sample_buffer);
 
@@ -165,2 +167,4 @@ class AudioDeviceIOS : public AudioDeviceGeneric,
 
+  OSType audio_unit_sub_type;
+
  private:
diff --git a/sdk/objc/native/src/audio/voice_processing_audio_unit.h b/sdk/objc/native/src/audio/voice_processing_audio_unit.h
index 72e29c0d67..518500eeda 100644
--- a/sdk/objc/native/src/audio/voice_processing_audio_unit.h
+++ b/sdk/objc/native/src/audio/voice_processing_audio_unit.h
@@ -72,3 +72,3 @@ class VoiceProcessingAudioUnit {
   // Does not intialize the audio unit.
-  bool Init();
+  bool Init(OSType audio_unit_sub_type);
 
@@ -136,2 +136,3 @@ class VoiceProcessingAudioUnit {
   VoiceProcessingAudioUnit::State state_;
+  OSType audio_unit_sub_type_;
 };
diff --git a/sdk/objc/native/src/audio/voice_processing_audio_unit.mm b/sdk/objc/native/src/audio/voice_processing_audio_unit.mm
index 2325b2ed2e..7607fa4c4c 100644
--- a/sdk/objc/native/src/audio/voice_processing_audio_unit.mm
+++ b/sdk/objc/native/src/audio/voice_processing_audio_unit.mm
@@ -89,5 +89,7 @@ static OSStatus GetAGCState(AudioUnit audio_unit, UInt32* enabled) {
 
-bool VoiceProcessingAudioUnit::Init() {
+bool VoiceProcessingAudioUnit::Init(OSType audio_unit_sub_type) {
   RTC_DCHECK_EQ(state_, kInitRequired);
 
+  audio_unit_sub_type_ = audio_unit_sub_type;
+
   // Create an audio component description to identify the Voice Processing
@@ -96,3 +98,3 @@ static OSStatus GetAGCState(AudioUnit audio_unit, UInt32* enabled) {
   vpio_unit_description.componentType = kAudioUnitType_Output;
-  vpio_unit_description.componentSubType = kAudioUnitSubType_VoiceProcessingIO;
+  vpio_unit_description.componentSubType = audio_unit_sub_type;
   vpio_unit_description.componentManufacturer = kAudioUnitManufacturer_Apple;
@@ -273,59 +275,60 @@ static OSStatus GetAGCState(AudioUnit audio_unit, UInt32* enabled) {
 
-  // AGC should be enabled by default for Voice Processing I/O units but it is
-  // checked below and enabled explicitly if needed. This scheme is used
-  // to be absolutely sure that the AGC is enabled since we have seen cases
-  // where only zeros are recorded and a disabled AGC could be one of the
-  // reasons why it happens.
-  int agc_was_enabled_by_default = 0;
-  UInt32 agc_is_enabled = 0;
-  result = GetAGCState(vpio_unit_, &agc_is_enabled);
-  if (result != noErr) {
-    RTCLogError(@"Failed to get AGC state (1st attempt). "
-                 "Error=%ld.",
-                (long)result);
-    // Example of error code: kAudioUnitErr_NoConnection (-10876).
-    // All error codes related to audio units are negative and are therefore
-    // converted into a postive value to match the UMA APIs.
-    RTC_HISTOGRAM_COUNTS_SPARSE_100000(
-        "WebRTC.Audio.GetAGCStateErrorCode1", (-1) * result);
-  } else if (agc_is_enabled) {
-    // Remember that the AGC was enabled by default. Will be used in UMA.
-    agc_was_enabled_by_default = 1;
-  } else {
-    // AGC was initially disabled => try to enable it explicitly.
-    UInt32 enable_agc = 1;
-    result =
-        AudioUnitSetProperty(vpio_unit_,
-                             kAUVoiceIOProperty_VoiceProcessingEnableAGC,
-                             kAudioUnitScope_Global, kInputBus, &enable_agc,
-                             sizeof(enable_agc));
-    if (result != noErr) {
-      RTCLogError(@"Failed to enable the built-in AGC. "
-                   "Error=%ld.",
-                  (long)result);
-      RTC_HISTOGRAM_COUNTS_SPARSE_100000(
-          "WebRTC.Audio.SetAGCStateErrorCode", (-1) * result);
-    }
+  if (audio_unit_sub_type_ == kAudioUnitSubType_VoiceProcessingIO) {
+    // AGC should be enabled by default for Voice Processing I/O units but it is
+    // checked below and enabled explicitly if needed. This scheme is used
+    // to be absolutely sure that the AGC is enabled since we have seen cases
+    // where only zeros are recorded and a disabled AGC could be one of the
+    // reasons why it happens.
+    int agc_was_enabled_by_default = 0;
+    UInt32 agc_is_enabled = 0;
     result = GetAGCState(vpio_unit_, &agc_is_enabled);
     if (result != noErr) {
-      RTCLogError(@"Failed to get AGC state (2nd attempt). "
-                   "Error=%ld.",
+      RTCLogError(@"Failed to get AGC state (1st attempt). "
+                  "Error=%ld.",
                   (long)result);
+      // Example of error code: kAudioUnitErr_NoConnection (-10876).
+      // All error codes related to audio units are negative and are therefore
+      // converted into a postive value to match the UMA APIs.
       RTC_HISTOGRAM_COUNTS_SPARSE_100000(
-          "WebRTC.Audio.GetAGCStateErrorCode2", (-1) * result);
+          "WebRTC.Audio.GetAGCStateErrorCode1", (-1) * result);
+    } else if (agc_is_enabled) {
+      // Remember that the AGC was enabled by default. Will be used in UMA.
+      agc_was_enabled_by_default = 1;
+    } else {
+      // AGC was initially disabled => try to enable it explicitly.
+      UInt32 enable_agc = 1;
+      result =
+          AudioUnitSetProperty(vpio_unit_,
+                              kAUVoiceIOProperty_VoiceProcessingEnableAGC,
+                              kAudioUnitScope_Global, kInputBus, &enable_agc,
+                              sizeof(enable_agc));
+      if (result != noErr) {
+        RTCLogError(@"Failed to enable the built-in AGC. "
+                    "Error=%ld.",
+                    (long)result);
+        RTC_HISTOGRAM_COUNTS_SPARSE_100000(
+            "WebRTC.Audio.SetAGCStateErrorCode", (-1) * result);
+      }
+      result = GetAGCState(vpio_unit_, &agc_is_enabled);
+      if (result != noErr) {
+        RTCLogError(@"Failed to get AGC state (2nd attempt). "
+                    "Error=%ld.",
+                    (long)result);
+        RTC_HISTOGRAM_COUNTS_SPARSE_100000(
+            "WebRTC.Audio.GetAGCStateErrorCode2", (-1) * result);
+      }
     }
-  }
-
-  // Track if the built-in AGC was enabled by default (as it should) or not.
-  RTC_HISTOGRAM_BOOLEAN("WebRTC.Audio.BuiltInAGCWasEnabledByDefault",
-                        agc_was_enabled_by_default);
-  RTCLog(@"WebRTC.Audio.BuiltInAGCWasEnabledByDefault: %d",
-         agc_was_enabled_by_default);
-  // As a final step, add an UMA histogram for tracking the AGC state.
-  // At this stage, the AGC should be enabled, and if it is not, more work is
-  // needed to find out the root cause.
-  RTC_HISTOGRAM_BOOLEAN("WebRTC.Audio.BuiltInAGCIsEnabled", agc_is_enabled);
-  RTCLog(@"WebRTC.Audio.BuiltInAGCIsEnabled: %u",
-         static_cast<unsigned int>(agc_is_enabled));
 
+    // Track if the built-in AGC was enabled by default (as it should) or not.
+    RTC_HISTOGRAM_BOOLEAN("WebRTC.Audio.BuiltInAGCWasEnabledByDefault",
+                          agc_was_enabled_by_default);
+    RTCLog(@"WebRTC.Audio.BuiltInAGCWasEnabledByDefault: %d",
+          agc_was_enabled_by_default);
+    // As a final step, add an UMA histogram for tracking the AGC state.
+    // At this stage, the AGC should be enabled, and if it is not, more work is
+    // needed to find out the root cause.
+    RTC_HISTOGRAM_BOOLEAN("WebRTC.Audio.BuiltInAGCIsEnabled", agc_is_enabled);
+    RTCLog(@"WebRTC.Audio.BuiltInAGCIsEnabled: %u",
+          static_cast<unsigned int>(agc_is_enabled));
+  }
   state_ = kInitialized;
diff --git a/sdk/BUILD.gn b/sdk/BUILD.gn
index 90e245a18d..72bde9e13b 100644
--- a/sdk/BUILD.gn
+++ b/sdk/BUILD.gn
@@ -374,6 +374,100 @@ if (is_ios || is_mac) {
       }
     }
 
+    if (is_mac) {
+      rtc_library("native_api_audio_device_module") {
+        visibility = [ "*" ]
+
+        sources = [
+          "objc/native/api/audio_device_module.h",
+          "objc/native/api/audio_device_module.mm",
+        ]
+
+        deps = [
+          ":audio_device",
+          "../modules/audio_device:audio_device_api",
+          "../modules/audio_device:audio_device_generic",
+          "../rtc_base:checks",
+          "../rtc_base:rtc_base_approved",
+          "../system_wrappers",
+        ]
+      }
+
+      rtc_source_set("audio_session_observer") {
+        visibility = [ ":*" ]
+
+        sources = [ "objc/native/src/audio/audio_session_observer.h" ]
+
+        deps = [
+          "../rtc_base",
+          "../rtc_base:threading",
+        ]
+      }
+
+      rtc_library("audio_device") {
+        visibility = [ "*" ]
+
+        sources = [
+          "objc/native/src/audio/audio_device_module_mac.h",
+          "objc/native/src/audio/audio_device_module_mac.mm",
+          "objc/native/src/audio/helpers.h",
+          "objc/native/src/audio/helpers.mm",
+        ]
+
+        deps = [
+          ":audio_session_observer",
+          ":base_objc",
+          "../api:array_view",
+          "../api/task_queue",
+          "../api/task_queue:default_task_queue_factory",
+          "../modules/audio_device:audio_device_api",
+          "../modules/audio_device:audio_device_buffer",
+          "../modules/audio_device:audio_device_generic",
+          "../rtc_base",
+          "../rtc_base:checks",
+          "../rtc_base:threading",
+          "../system_wrappers:field_trial",
+          "../system_wrappers:metrics",
+        ]
+        absl_deps = [ "//third_party/abseil-cpp/absl/base:core_headers" ]
+
+        frameworks = [ "AudioToolbox.framework" ]
+      }
+
+      rtc_source_set("network_monitor_observer") {
+        visibility = [ ":*" ]
+
+        sources = [ "objc/native/src/network_monitor_observer.h" ]
+
+        deps = [
+          "../rtc_base",
+          "../rtc_base:network_constants",
+          "../rtc_base:threading",
+        ]
+      }
+
+      rtc_library("network_monitor_objc") {
+        visibility = [ "*" ]
+
+        sources = [
+          "objc/components/network/RTCNetworkMonitor+Private.h",
+          "objc/components/network/RTCNetworkMonitor.h",
+          "objc/components/network/RTCNetworkMonitor.mm",
+        ]
+
+        configs += [ ":used_from_extension" ]
+
+        frameworks = [ "Network.framework" ]
+
+        deps = [
+          ":base_objc",
+          ":helpers_objc",
+          ":network_monitor_observer",
+          "../rtc_base/system:gcd_helpers",
+        ]
+      }      
+    }
+
     rtc_library("videosource_objc") {
       sources = [
         "objc/api/peerconnection/RTCVideoSource+Private.h",
@@ -867,2 +987,7 @@ if (is_ios || is_mac) {
       sources = [
+        "objc/api/peerconnection/RTCAudioDevice.h",
+        "objc/api/peerconnection/RTCAudioDevice.mm",
+        "objc/api/peerconnection/RTCAudioDeviceModule.h",
+        "objc/api/peerconnection/RTCAudioDeviceModule.mm",
+        "objc/api/peerconnection/RTCAudioDeviceModule+Private.h",
         "objc/api/peerconnection/RTCAudioSource+Private.h",
@@ -1017,7 +1043,7 @@ if (is_ios || is_mac) {
         "../system_wrappers:metrics",
       ]
 
-      if (is_ios) {
+      if (is_ios || is_mac) {
         deps += [ ":native_api_audio_device_module" ]
       }
     }
@@ -1258,2 +1384,4 @@ if (is_ios || is_mac) {
           "objc/helpers/UIDevice+RTCDevice.h",
+          "objc/api/peerconnection/RTCAudioDevice.h",
+          "objc/api/peerconnection/RTCAudioDeviceModule.h",
           "objc/api/peerconnection/RTCAudioSource.h",
@@ -1369,2 +1507,4 @@ if (is_ios || is_mac) {
         sources = [
+          "objc/api/peerconnection/RTCAudioDevice.h",
+          "objc/api/peerconnection/RTCAudioDeviceModule.h",
           "objc/api/peerconnection/RTCAudioSource.h",
diff --git a/sdk/objc/api/peerconnection/RTCPeerConnectionFactory.h b/sdk/objc/api/peerconnection/RTCPeerConnectionFactory.h
index 2b0489885f..7e5f7ca218 100644
--- a/sdk/objc/api/peerconnection/RTCPeerConnectionFactory.h
+++ b/sdk/objc/api/peerconnection/RTCPeerConnectionFactory.h
@@ -13,2 +13,3 @@
 #import "RTCMacros.h"
+#import "RTCAudioDeviceModule.h"
 
@@ -43,2 +44,6 @@ RTC_OBJC_EXPORT
 
+- (instancetype)initWithEncoderFactory:(nullable id<RTCVideoEncoderFactory>)encoderFactory
+                        decoderFactory:(nullable id<RTCVideoDecoderFactory>)decoderFactory
+                     audioDeviceModule:(RTCAudioDeviceModule *)audioDeviceModule;
+
 /** Initialize an RTCAudioSource with constraints. */

diff --git a/sdk/objc/api/peerconnection/RTCPeerConnectionFactory.mm b/sdk/objc/api/peerconnection/RTCPeerConnectionFactory.mm
index 2f324f7289..2f88b9a0b1 100644
--- a/sdk/objc/api/peerconnection/RTCPeerConnectionFactory.mm
+++ b/sdk/objc/api/peerconnection/RTCPeerConnectionFactory.mm
@@ -16,2 +16,3 @@
 
+#import "RTCAudioDeviceModule+Private.h"
 #import "RTCAudioSource+Private.h"
@@ -115,2 +116,26 @@ - (instancetype)init {
 }
+
+- (instancetype)initWithEncoderFactory:(nullable id<RTCVideoEncoderFactory>)encoderFactory
+                        decoderFactory:(nullable id<RTCVideoDecoderFactory>)decoderFactory
+                     audioDeviceModule:(RTCAudioDeviceModule *)audioDeviceModule {
+#ifdef HAVE_NO_MEDIA
+  return [self initWithNoMedia];
+#else
+  std::unique_ptr<webrtc::VideoEncoderFactory> native_encoder_factory;
+  std::unique_ptr<webrtc::VideoDecoderFactory> native_decoder_factory;
+  if (encoderFactory) {
+    native_encoder_factory = webrtc::ObjCToNativeVideoEncoderFactory(encoderFactory);
+  }
+  if (decoderFactory) {
+    native_decoder_factory = webrtc::ObjCToNativeVideoDecoderFactory(decoderFactory);
+  }
+  return [self initWithNativeAudioEncoderFactory:webrtc::CreateBuiltinAudioEncoderFactory()
+                       nativeAudioDecoderFactory:webrtc::CreateBuiltinAudioDecoderFactory()
+                       nativeVideoEncoderFactory:std::move(native_encoder_factory)
+                       nativeVideoDecoderFactory:std::move(native_decoder_factory)
+                               audioDeviceModule:audioDeviceModule.nativeModule
+                           audioProcessingModule:nullptr];
+#endif
+}
+
 - (instancetype)initNative {
diff --git a/sdk/objc/native/src/audio/audio_device_ios.mm b/sdk/objc/native/src/audio/audio_device_ios.mm
index f51714ce1d..5d799d7da4 100644
--- a/sdk/objc/native/src/audio/audio_device_ios.mm
+++ b/sdk/objc/native/src/audio/audio_device_ios.mm
@@ -11,2 +11,3 @@
 #import <AVFoundation/AVFoundation.h>
+#import <CoreMedia/CoreMedia.h>
 #import <Foundation/Foundation.h>
@@ -232,3 +234,6 @@ static void LogDeviceInfo() {
   RTC_DCHECK(!playing_);
-  RTC_DCHECK(audio_unit_);
+  if (!audio_unit_) {
+    RTCLogError(@"StartPlayout failed because audio is disabled.");
+    return -1;
+  }
   if (fine_audio_buffer_) {
@@ -285,3 +290,2 @@ static void LogDeviceInfo() {
   RTC_DCHECK(!recording_);
-  RTC_DCHECK(audio_unit_);
   if (fine_audio_buffer_) {
@@ -289,3 +293,3 @@ static void LogDeviceInfo() {
   }
-  if (!playing_ && audio_unit_->GetState() == VoiceProcessingAudioUnit::kInitialized) {
+  if (!playing_ && audio_unit_ && audio_unit_->GetState() == VoiceProcessingAudioUnit::kInitialized) {
     if (!audio_unit_->Start()) {
@@ -307,3 +311,5 @@ static void LogDeviceInfo() {
   if (!playing_) {
-    ShutdownPlayOrRecord();
+    if (audio_unit_) {
+      ShutdownPlayOrRecord();
+    }
     audio_is_initialized_ = false;
@@ -369,2 +375,60 @@ static void LogDeviceInfo() {
 
+void AudioDeviceIOS::OnDeliverRecordedExternalData(CMSampleBufferRef sample_buffer) {
+  RTC_DCHECK_RUN_ON(&io_thread_checker_);
+
+  if (audio_unit_ && audio_unit_->GetState() != VoiceProcessingAudioUnit::kUninitialized) {
+    RTCLogError(@"External recorded data was provided while audio unit is enabled.");
+    return;
+  }
+
+  CMFormatDescriptionRef description = CMSampleBufferGetFormatDescription(sample_buffer);
+  const AudioStreamBasicDescription *asbd = CMAudioFormatDescriptionGetStreamBasicDescription(description);
+  if (!asbd) {
+    RTCLogError(@"External recorded data was not in audio format.");
+    return;
+  }
+
+  if (asbd->mSampleRate != record_parameters_.sample_rate() ||
+      asbd->mChannelsPerFrame != record_parameters_.channels()) {
+    record_parameters_.reset(asbd->mSampleRate, asbd->mChannelsPerFrame);
+    UpdateAudioDeviceBuffer();
+
+    // Create a modified audio buffer class which allows us to ask for,
+    // or deliver, any number of samples (and not only multiple of 10ms) to match
+    // the native audio unit buffer size.
+    RTC_DCHECK(audio_device_buffer_);
+    fine_audio_buffer_.reset(new FineAudioBuffer(audio_device_buffer_));
+  }
+
+  CMBlockBufferRef block_buffer = CMSampleBufferGetDataBuffer(sample_buffer);
+  if (block_buffer == nil) {
+    return;
+  }
+
+  AudioBufferList buffer_list;
+  CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer(sample_buffer,
+                                                          nullptr,
+                                                          &buffer_list,
+                                                          sizeof(buffer_list),
+                                                          nullptr,
+                                                          nullptr,
+                                                          kCMSampleBufferFlag_AudioBufferList_Assure16ByteAlignment,
+                                                          &block_buffer);
+
+  rtc::ArrayView<int16_t> view {
+    static_cast<int16_t*>(buffer_list.mBuffers[0].mData),
+    buffer_list.mBuffers[0].mDataByteSize / sizeof(int16_t)
+  };
+
+  if (asbd->mFormatFlags & kAudioFormatFlagIsBigEndian) {
+    for (auto& element : view) {
+      element = be16toh(element);
+    }
+  }
+
+  fine_audio_buffer_->DeliverRecordedData(view, kFixedRecordDelayEstimate);
+
+  CFRelease(block_buffer);
+}
+
 OSStatus AudioDeviceIOS::OnDeliverRecordedData(AudioUnitRenderActionFlags* flags,
@@ -734,3 +798,3 @@ static void LogDeviceInfo() {
   audio_unit_.reset(new VoiceProcessingAudioUnit(bypass_voice_processing_, this));
-  if (!audio_unit_->Init()) {
+  if (!audio_unit_->Init(audio_unit_sub_type)) {
     audio_unit_.reset();
@@ -757,4 +821,6 @@ static void LogDeviceInfo() {
 
-  // If we're initialized, we must have an audio unit.
-  RTC_DCHECK(audio_unit_);
+  if (!audio_unit_ && !CreateAudioUnit()) {
+    RTCLog(@"Failed to create audio unit.");
+    return;
+  }
 
@@ -907,2 +973,7 @@ static void LogDeviceInfo() {
   if (session.canPlayOrRecord) {
+    // There should be no audio unit at this point.
+    if (!CreateAudioUnit()) {
+      [session unlockForConfiguration];
+      return false;
+    }
     if (!ConfigureAudioSessionLocked()) {
diff --git a/sdk/objc/native/api/audio_device_module.mm b/sdk/objc/native/api/audio_device_module.mm
index dd95775204..148bdb958b 100644
--- a/sdk/objc/native/api/audio_device_module.mm
+++ b/sdk/objc/native/api/audio_device_module.mm
@@ -13,7 +13,11 @@
 #include "rtc_base/logging.h"
 #include "rtc_base/ref_counted_object.h"
 
+#if defined(WEBRTC_IOS)
 #include "sdk/objc/native/src/audio/audio_device_module_ios.h"
+#elif defined(WEBRTC_MAC)
+#include "sdk/objc/native/src/audio/audio_device_module_mac.h"
+#endif
 
 namespace webrtc {
 
@@ -21,6 +25,8 @@
   RTC_DLOG(INFO) << __FUNCTION__;
 #if defined(WEBRTC_IOS)
   return new rtc::RefCountedObject<ios_adm::AudioDeviceModuleIOS>(bypass_voice_processing);
+#elif defined(WEBRTC_MAC)
+  return new rtc::RefCountedObject<mac_adm::AudioDeviceModuleMac>(bypass_voice_processing);
 #else
   RTC_LOG(LERROR)
       << "current platform is not supported => this module will self destruct!";
diff --git a/sdk/objc/native/src/audio/audio_device_module_ios.h b/sdk/objc/native/src/audio/audio_device_module_ios.h
index 9bcf114e32..075f3ac664 100644
--- a/sdk/objc/native/src/audio/audio_device_module_ios.h
+++ b/sdk/objc/native/src/audio/audio_device_module_ios.h
@@ -22,2 +22,6 @@
 
+#if defined(WEBRTC_IOS)
+#include <CoreMedia/CoreMedia.h>
+#endif
+
 namespace webrtc {
@@ -129,2 +133,5 @@ class AudioDeviceModuleIOS : public AudioDeviceModule {
 #if defined(WEBRTC_IOS)
+  void OnDeliverRecordedExternalData(CMSampleBufferRef sample_buffer);
+  OSType GetAudioUnitSubType() const;
+  void SetAudioUnitSubType(OSType sub_type);
   int GetPlayoutAudioParameters(AudioParameters* params) const override;
@@ -138,2 +145,6 @@ class AudioDeviceModuleIOS : public AudioDeviceModule {
   std::unique_ptr<AudioDeviceBuffer> audio_device_buffer_;
+
+#if defined(WEBRTC_IOS)
+  OSType audio_unit_sub_type_ = kAudioUnitSubType_VoiceProcessingIO;
+#endif // WEBRTC_IOS
 };
diff --git a/sdk/objc/native/src/audio/audio_device_module_ios.mm b/sdk/objc/native/src/audio/audio_device_module_ios.mm
index 859442dc9e..e5c9a7ea3e 100644
--- a/sdk/objc/native/src/audio/audio_device_module_ios.mm
+++ b/sdk/objc/native/src/audio/audio_device_module_ios.mm
@@ -78,2 +78,4 @@
 
+    audio_device_->audio_unit_sub_type = audio_unit_sub_type_;
+
     this->AttachAudioBuffer();
@@ -652,3 +654,19 @@
 
+  OSType AudioDeviceModuleIOS::GetAudioUnitSubType() const {
+    return audio_unit_sub_type_;
+  }
+
+  void AudioDeviceModuleIOS::SetAudioUnitSubType(OSType sub_type) {
+    audio_unit_sub_type_ = sub_type;
+
+    if (audio_device_) {
+      audio_device_->audio_unit_sub_type = sub_type;
+    }
+  }
+
 #if defined(WEBRTC_IOS)
+  void AudioDeviceModuleIOS::OnDeliverRecordedExternalData(CMSampleBufferRef sample_buffer) {
+    audio_device_->OnDeliverRecordedExternalData(sample_buffer);
+  }
+
   int AudioDeviceModuleIOS::GetPlayoutAudioParameters(
diff --git a/modules/audio_device/mac/audio_device_mac.h b/modules/audio_device/mac/audio_device_mac.h
index f9504b64b5..2aedb2e59b 100644
--- a/modules/audio_device/mac/audio_device_mac.h
+++ b/modules/audio_device/mac/audio_device_mac.h
@@ -176,6 +176,11 @@ class AudioDeviceMac : public AudioDeviceGeneric {
                            AudioDeviceID scopedDeviceIds[],
                            const uint32_t deviceListLength);

+  int32_t GetDeviceId(const AudioObjectPropertyScope scope,
+                        const uint16_t index,
+                        char* uid);
+
+
   int32_t GetDeviceName(const AudioObjectPropertyScope scope,
                         const uint16_t index,
                         char* name);

diff --git a/modules/audio_device/mac/audio_device_mac.cc b/modules/audio_device/mac/audio_device_mac.cc
index e0d4419c81..b2c65c2c8c 100644
--- a/modules/audio_device/mac/audio_device_mac.cc
+++ b/modules/audio_device/mac/audio_device_mac.cc
@@ -852,6 +852,7 @@ int32_t AudioDeviceMac::PlayoutDeviceName(uint16_t index,

   if (guid != NULL) {
     memset(guid, 0, kAdmMaxGuidSize);
+    GetDeviceId(kAudioDevicePropertyScopeOutput, index, guid);
   }

   return GetDeviceName(kAudioDevicePropertyScopeOutput, index, name);
@@ -870,6 +871,7 @@ int32_t AudioDeviceMac::RecordingDeviceName(uint16_t index,

   if (guid != NULL) {
     memset(guid, 0, kAdmMaxGuidSize);
+    GetDeviceId(kAudioDevicePropertyScopeInput, index, guid);
   }
 
   return GetDeviceName(kAudioDevicePropertyScopeInput, index, name);
@@ -1663,6 +1665,28 @@ int32_t AudioDeviceMac::GetNumberDevices(const AudioObjectPropertyScope scope,
   return numberScopedDevices;
 }
 
+int32_t AudioDeviceMac::GetDeviceId(const AudioObjectPropertyScope scope,
+                                      const uint16_t index,
+                                      char* uid) {
+  AudioDeviceID deviceIds[MaxNumberDevices];
+
+  int numberDevices = GetNumberDevices(scope, deviceIds, MaxNumberDevices);
+  if (numberDevices < 0) {
+    return -1;
+  } else if (numberDevices == 0) {
+    RTC_LOG(LS_ERROR) << "No devices";
+    return -1;
+  }
+
+  if (numberDevices <= index) {
+    RTC_LOG(LS_ERROR) << "Devices index out of range";
+    return -1;
+  }
+
+  sprintf(uid, "%d", deviceIds[index]);
+  return 0;
+}
+
 int32_t AudioDeviceMac::GetDeviceName(const AudioObjectPropertyScope scope,
                                       const uint16_t index,
                                       char* name) {
diff --git a/sdk/objc/native/src/audio/audio_device_module_mac.h b/sdk/objc/native/src/audio/audio_device_module_mac.h
new file mode 100644
index 0000000000..cc51dcc85e
--- /dev/null
+++ b/sdk/objc/native/src/audio/audio_device_module_mac.h
@@ -0,0 +1,153 @@
+/*
+ *  Copyright (c) 2012 The WebRTC project authors. All Rights Reserved.
+ *
+ *  Use of this source code is governed by a BSD-style license
+ *  that can be found in the LICENSE file in the root of the source
+ *  tree. An additional intellectual property rights grant can be found
+ *  in the file PATENTS.  All contributing project authors may
+ *  be found in the AUTHORS file in the root of the source tree.
+ */
+
+#ifndef SDK_OBJC_NATIVE_SRC_AUDIO_AUDIO_DEVICE_MODULE_MAC_H_
+#define SDK_OBJC_NATIVE_SRC_AUDIO_AUDIO_DEVICE_MODULE_MAC_H_
+
+#include <memory>
+
+#include "modules/audio_device/mac/audio_device_mac.h"
+
+#include "api/task_queue/task_queue_factory.h"
+#include "modules/audio_device/audio_device_buffer.h"
+#include "modules/audio_device/include/audio_device.h"
+#include "rtc_base/checks.h"
+
+#if defined(WEBRTC_IOS)
+#include <CoreMedia/CoreMedia.h>
+#endif
+
+namespace webrtc {
+
+class AudioDeviceGeneric;
+
+namespace mac_adm {
+
+class AudioDeviceModuleMac : public AudioDeviceModule {
+ public:
+  int32_t AttachAudioBuffer();
+
+  explicit AudioDeviceModuleMac(bool bypass_voice_processing);
+  ~AudioDeviceModuleMac() override;
+
+  // Retrieve the currently utilized audio layer
+  int32_t ActiveAudioLayer(AudioLayer* audioLayer) const override;
+
+  // Full-duplex transportation of PCM audio
+  int32_t RegisterAudioCallback(AudioTransport* audioCallback) override;
+
+  // Main initializaton and termination
+  int32_t Init() override;
+  int32_t Terminate() override;
+  bool Initialized() const override;
+
+  // Device enumeration
+  int16_t PlayoutDevices() override;
+  int16_t RecordingDevices() override;
+  int32_t PlayoutDeviceName(uint16_t index,
+                            char name[kAdmMaxDeviceNameSize],
+                            char guid[kAdmMaxGuidSize]) override;
+  int32_t RecordingDeviceName(uint16_t index,
+                              char name[kAdmMaxDeviceNameSize],
+                              char guid[kAdmMaxGuidSize]) override;
+
+  // Device selection
+  int32_t SetPlayoutDevice(uint16_t index) override;
+  int32_t SetPlayoutDevice(WindowsDeviceType device) override;
+  int32_t SetRecordingDevice(uint16_t index) override;
+  int32_t SetRecordingDevice(WindowsDeviceType device) override;
+
+  // Audio transport initialization
+  int32_t PlayoutIsAvailable(bool* available) override;
+  int32_t InitPlayout() override;
+  bool PlayoutIsInitialized() const override;
+  int32_t RecordingIsAvailable(bool* available) override;
+  int32_t InitRecording() override;
+  bool RecordingIsInitialized() const override;
+
+  // Audio transport control
+  int32_t StartPlayout() override;
+  int32_t StopPlayout() override;
+  bool Playing() const override;
+  int32_t StartRecording() override;
+  int32_t StopRecording() override;
+  bool Recording() const override;
+
+  // Audio mixer initialization
+  int32_t InitSpeaker() override;
+  bool SpeakerIsInitialized() const override;
+  int32_t InitMicrophone() override;
+  bool MicrophoneIsInitialized() const override;
+
+  // Speaker volume controls
+  int32_t SpeakerVolumeIsAvailable(bool* available) override;
+  int32_t SetSpeakerVolume(uint32_t volume) override;
+  int32_t SpeakerVolume(uint32_t* volume) const override;
+  int32_t MaxSpeakerVolume(uint32_t* maxVolume) const override;
+  int32_t MinSpeakerVolume(uint32_t* minVolume) const override;
+
+  // Microphone volume controls
+  int32_t MicrophoneVolumeIsAvailable(bool* available) override;
+  int32_t SetMicrophoneVolume(uint32_t volume) override;
+  int32_t MicrophoneVolume(uint32_t* volume) const override;
+  int32_t MaxMicrophoneVolume(uint32_t* maxVolume) const override;
+  int32_t MinMicrophoneVolume(uint32_t* minVolume) const override;
+
+  // Speaker mute control
+  int32_t SpeakerMuteIsAvailable(bool* available) override;
+  int32_t SetSpeakerMute(bool enable) override;
+  int32_t SpeakerMute(bool* enabled) const override;
+
+  // Microphone mute control
+  int32_t MicrophoneMuteIsAvailable(bool* available) override;
+  int32_t SetMicrophoneMute(bool enable) override;
+  int32_t MicrophoneMute(bool* enabled) const override;
+
+  // Stereo support
+  int32_t StereoPlayoutIsAvailable(bool* available) const override;
+  int32_t SetStereoPlayout(bool enable) override;
+  int32_t StereoPlayout(bool* enabled) const override;
+  int32_t StereoRecordingIsAvailable(bool* available) const override;
+  int32_t SetStereoRecording(bool enable) override;
+  int32_t StereoRecording(bool* enabled) const override;
+
+  // Delay information and control
+  int32_t PlayoutDelay(uint16_t* delayMS) const override;
+
+  bool BuiltInAECIsAvailable() const override;
+  int32_t EnableBuiltInAEC(bool enable) override;
+  bool BuiltInAGCIsAvailable() const override;
+  int32_t EnableBuiltInAGC(bool enable) override;
+  bool BuiltInNSIsAvailable() const override;
+  int32_t EnableBuiltInNS(bool enable) override;
+
+  int32_t GetPlayoutUnderrunCount() const override;
+
+#if defined(WEBRTC_IOS)
+  void OnDeliverRecordedExternalData(CMSampleBufferRef sample_buffer);
+  OSType GetAudioUnitSubType() const;
+  void SetAudioUnitSubType(OSType sub_type);
+  int GetPlayoutAudioParameters(AudioParameters* params) const override;
+  int GetRecordAudioParameters(AudioParameters* params) const override;
+#endif  // WEBRTC_IOS
+ private:
+  bool initialized_ = false;
+  const std::unique_ptr<TaskQueueFactory> task_queue_factory_;
+  std::unique_ptr<AudioDeviceMac> audio_device_;
+  std::unique_ptr<AudioDeviceBuffer> audio_device_buffer_;
+
+#if defined(WEBRTC_IOS)
+  OSType audio_unit_sub_type_ = kAudioUnitSubType_VoiceProcessingIO;
+#endif // WEBRTC_IOS
+};
+}  // namespace mac_adm
+}  // namespace webrtc
+
+#endif  // SDK_OBJC_NATIVE_SRC_AUDIO_AUDIO_DEVICE_MODULE_MAC_H_
diff --git a/sdk/objc/native/src/audio/audio_device_module_mac.mm b/sdk/objc/native/src/audio/audio_device_module_mac.mm
new file mode 100644
index 0000000000..1afecb9b26
--- /dev/null
+++ b/sdk/objc/native/src/audio/audio_device_module_mac.mm
@@ -0,0 +1,676 @@
+/*
+ *  Copyright (c) 2012 The WebRTC project authors. All Rights Reserved.
+ *
+ *  Use of this source code is governed by a BSD-style license
+ *  that can be found in the LICENSE file in the root of the source
+ *  tree. An additional intellectual property rights grant can be found
+ *  in the file PATENTS.  All contributing project authors may
+ *  be found in the AUTHORS file in the root of the source tree.
+ */
+
+#include "audio_device_module_mac.h"
+
+#include "api/task_queue/default_task_queue_factory.h"
+#include "modules/audio_device/audio_device_config.h"
+#include "modules/audio_device/audio_device_generic.h"
+#include "rtc_base/checks.h"
+#include "rtc_base/logging.h"
+#include "rtc_base/ref_count.h"
+#include "rtc_base/ref_counted_object.h"
+#include "system_wrappers/include/metrics.h"
+
+#if defined(WEBRTC_MAC)
+#include "modules/audio_device/mac/audio_device_mac.h"
+#endif
+
+#define CHECKinitialized_() \
+  {                         \
+    if (!initialized_) {    \
+      return -1;            \
+    };                      \
+  }
+
+#define CHECKinitialized__BOOL() \
+  {                              \
+    if (!initialized_) {         \
+      return false;              \
+    };                           \
+  }
+
+namespace webrtc {
+namespace mac_adm {
+
+AudioDeviceModuleMac::AudioDeviceModuleMac(bool bypass_voice_processing)
+    : task_queue_factory_(CreateDefaultTaskQueueFactory()) {
+  RTC_LOG(INFO) << "current platform is macOS";
+  RTC_LOG(INFO) << "macOS Audio APIs will be utilized.";
+}
+
+  int32_t AudioDeviceModuleMac::AttachAudioBuffer() {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    audio_device_->AttachAudioBuffer(audio_device_buffer_.get());
+    return 0;
+  }
+
+  AudioDeviceModuleMac::~AudioDeviceModuleMac() {
+    RTC_DLOG(INFO) << __FUNCTION__;
+  }
+
+  int32_t AudioDeviceModuleMac::ActiveAudioLayer(AudioLayer* audioLayer) const {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    AudioLayer activeAudio;
+    if (audio_device_->ActiveAudioLayer(activeAudio) == -1) {
+      return -1;
+    }
+    *audioLayer = activeAudio;
+    return 0;
+  }
+
+  int32_t AudioDeviceModuleMac::Init() {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    if (initialized_)
+      return 0;
+
+    audio_device_buffer_.reset(new webrtc::AudioDeviceBuffer(task_queue_factory_.get()));
+    audio_device_.reset(new webrtc::AudioDeviceMac());
+    RTC_CHECK(audio_device_);
+
+    // audio_device_->audio_unit_sub_type = audio_unit_sub_type_;
+
+    this->AttachAudioBuffer();
+
+    AudioDeviceGeneric::InitStatus status = audio_device_->Init();
+    RTC_HISTOGRAM_ENUMERATION(
+        "WebRTC.Audio.InitializationResult", static_cast<int>(status),
+        static_cast<int>(AudioDeviceGeneric::InitStatus::NUM_STATUSES));
+    if (status != AudioDeviceGeneric::InitStatus::OK) {
+      RTC_LOG(LS_ERROR) << "Audio device initialization failed.";
+      return -1;
+    }
+    initialized_ = true;
+    return 0;
+  }
+
+  int32_t AudioDeviceModuleMac::Terminate() {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    if (!initialized_)
+      return 0;
+    if (audio_device_->Terminate() == -1) {
+      return -1;
+    }
+    initialized_ = false;
+    return 0;
+  }
+
+  bool AudioDeviceModuleMac::Initialized() const {
+    RTC_DLOG(INFO) << __FUNCTION__ << ": " << initialized_;
+    return initialized_;
+  }
+
+  int32_t AudioDeviceModuleMac::InitSpeaker() {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    return audio_device_->InitSpeaker();
+  }
+
+  int32_t AudioDeviceModuleMac::InitMicrophone() {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    return audio_device_->InitMicrophone();
+  }
+
+  int32_t AudioDeviceModuleMac::SpeakerVolumeIsAvailable(bool* available) {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    bool isAvailable = false;
+    if (audio_device_->SpeakerVolumeIsAvailable(isAvailable) == -1) {
+      return -1;
+    }
+    *available = isAvailable;
+    RTC_DLOG(INFO) << "output: " << isAvailable;
+    return 0;
+  }
+
+  int32_t AudioDeviceModuleMac::SetSpeakerVolume(uint32_t volume) {
+    RTC_DLOG(INFO) << __FUNCTION__ << "(" << volume << ")";
+    CHECKinitialized_();
+    return audio_device_->SetSpeakerVolume(volume);
+  }
+
+  int32_t AudioDeviceModuleMac::SpeakerVolume(uint32_t* volume) const {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    uint32_t level = 0;
+    if (audio_device_->SpeakerVolume(level) == -1) {
+      return -1;
+    }
+    *volume = level;
+    RTC_DLOG(INFO) << "output: " << *volume;
+    return 0;
+  }
+
+  bool AudioDeviceModuleMac::SpeakerIsInitialized() const {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized__BOOL();
+    bool isInitialized = audio_device_->SpeakerIsInitialized();
+    RTC_DLOG(INFO) << "output: " << isInitialized;
+    return isInitialized;
+  }
+
+  bool AudioDeviceModuleMac::MicrophoneIsInitialized() const {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized__BOOL();
+    bool isInitialized = audio_device_->MicrophoneIsInitialized();
+    RTC_DLOG(INFO) << "output: " << isInitialized;
+    return isInitialized;
+  }
+
+  int32_t AudioDeviceModuleMac::MaxSpeakerVolume(uint32_t* maxVolume) const {
+    CHECKinitialized_();
+    uint32_t maxVol = 0;
+    if (audio_device_->MaxSpeakerVolume(maxVol) == -1) {
+      return -1;
+    }
+    *maxVolume = maxVol;
+    return 0;
+  }
+
+  int32_t AudioDeviceModuleMac::MinSpeakerVolume(uint32_t* minVolume) const {
+    CHECKinitialized_();
+    uint32_t minVol = 0;
+    if (audio_device_->MinSpeakerVolume(minVol) == -1) {
+      return -1;
+    }
+    *minVolume = minVol;
+    return 0;
+  }
+
+  int32_t AudioDeviceModuleMac::SpeakerMuteIsAvailable(bool* available) {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    bool isAvailable = false;
+    if (audio_device_->SpeakerMuteIsAvailable(isAvailable) == -1) {
+      return -1;
+    }
+    *available = isAvailable;
+    RTC_DLOG(INFO) << "output: " << isAvailable;
+    return 0;
+  }
+
+  int32_t AudioDeviceModuleMac::SetSpeakerMute(bool enable) {
+    RTC_DLOG(INFO) << __FUNCTION__ << "(" << enable << ")";
+    CHECKinitialized_();
+    return audio_device_->SetSpeakerMute(enable);
+  }
+
+  int32_t AudioDeviceModuleMac::SpeakerMute(bool* enabled) const {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    bool muted = false;
+    if (audio_device_->SpeakerMute(muted) == -1) {
+      return -1;
+    }
+    *enabled = muted;
+    RTC_DLOG(INFO) << "output: " << muted;
+    return 0;
+  }
+
+  int32_t AudioDeviceModuleMac::MicrophoneMuteIsAvailable(bool* available) {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    bool isAvailable = false;
+    if (audio_device_->MicrophoneMuteIsAvailable(isAvailable) == -1) {
+      return -1;
+    }
+    *available = isAvailable;
+    RTC_DLOG(INFO) << "output: " << isAvailable;
+    return 0;
+  }
+
+  int32_t AudioDeviceModuleMac::SetMicrophoneMute(bool enable) {
+    RTC_DLOG(INFO) << __FUNCTION__ << "(" << enable << ")";
+    CHECKinitialized_();
+    return (audio_device_->SetMicrophoneMute(enable));
+  }
+
+  int32_t AudioDeviceModuleMac::MicrophoneMute(bool* enabled) const {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    bool muted = false;
+    if (audio_device_->MicrophoneMute(muted) == -1) {
+      return -1;
+    }
+    *enabled = muted;
+    RTC_DLOG(INFO) << "output: " << muted;
+    return 0;
+  }
+
+  int32_t AudioDeviceModuleMac::MicrophoneVolumeIsAvailable(bool* available) {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    bool isAvailable = false;
+    if (audio_device_->MicrophoneVolumeIsAvailable(isAvailable) == -1) {
+      return -1;
+    }
+    *available = isAvailable;
+    RTC_DLOG(INFO) << "output: " << isAvailable;
+    return 0;
+  }
+
+  int32_t AudioDeviceModuleMac::SetMicrophoneVolume(uint32_t volume) {
+    RTC_DLOG(INFO) << __FUNCTION__ << "(" << volume << ")";
+    CHECKinitialized_();
+    return (audio_device_->SetMicrophoneVolume(volume));
+  }
+
+  int32_t AudioDeviceModuleMac::MicrophoneVolume(uint32_t* volume) const {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    uint32_t level = 0;
+    if (audio_device_->MicrophoneVolume(level) == -1) {
+      return -1;
+    }
+    *volume = level;
+    RTC_DLOG(INFO) << "output: " << *volume;
+    return 0;
+  }
+
+  int32_t AudioDeviceModuleMac::StereoRecordingIsAvailable(
+      bool* available) const {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    bool isAvailable = false;
+    if (audio_device_->StereoRecordingIsAvailable(isAvailable) == -1) {
+      return -1;
+    }
+    *available = isAvailable;
+    RTC_DLOG(INFO) << "output: " << isAvailable;
+    return 0;
+  }
+
+  int32_t AudioDeviceModuleMac::SetStereoRecording(bool enable) {
+    RTC_DLOG(INFO) << __FUNCTION__ << "(" << enable << ")";
+    CHECKinitialized_();
+    if (enable) {
+      RTC_LOG(WARNING) << "recording in stereo is not supported";
+    }
+    return -1;
+  }
+
+  int32_t AudioDeviceModuleMac::StereoRecording(bool* enabled) const {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    bool stereo = false;
+    if (audio_device_->StereoRecording(stereo) == -1) {
+      return -1;
+    }
+    *enabled = stereo;
+    RTC_DLOG(INFO) << "output: " << stereo;
+    return 0;
+  }
+
+  int32_t AudioDeviceModuleMac::StereoPlayoutIsAvailable(bool* available) const {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    bool isAvailable = false;
+    if (audio_device_->StereoPlayoutIsAvailable(isAvailable) == -1) {
+      return -1;
+    }
+    *available = isAvailable;
+    RTC_DLOG(INFO) << "output: " << isAvailable;
+    return 0;
+  }
+
+  int32_t AudioDeviceModuleMac::SetStereoPlayout(bool enable) {
+    RTC_DLOG(INFO) << __FUNCTION__ << "(" << enable << ")";
+    CHECKinitialized_();
+    if (audio_device_->PlayoutIsInitialized()) {
+      RTC_LOG(LERROR)
+      << "unable to set stereo mode while playing side is initialized";
+      return -1;
+    }
+    if (audio_device_->SetStereoPlayout(enable)) {
+      RTC_LOG(WARNING) << "stereo playout is not supported";
+      return -1;
+    }
+    int8_t nChannels(1);
+    if (enable) {
+      nChannels = 2;
+    }
+    audio_device_buffer_.get()->SetPlayoutChannels(nChannels);
+    return 0;
+  }
+
+  int32_t AudioDeviceModuleMac::StereoPlayout(bool* enabled) const {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    bool stereo = false;
+    if (audio_device_->StereoPlayout(stereo) == -1) {
+      return -1;
+    }
+    *enabled = stereo;
+    RTC_DLOG(INFO) << "output: " << stereo;
+    return 0;
+  }
+
+  int32_t AudioDeviceModuleMac::PlayoutIsAvailable(bool* available) {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    bool isAvailable = false;
+    if (audio_device_->PlayoutIsAvailable(isAvailable) == -1) {
+      return -1;
+    }
+    *available = isAvailable;
+    RTC_DLOG(INFO) << "output: " << isAvailable;
+    return 0;
+  }
+
+  int32_t AudioDeviceModuleMac::RecordingIsAvailable(bool* available) {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    bool isAvailable = false;
+    if (audio_device_->RecordingIsAvailable(isAvailable) == -1) {
+      return -1;
+    }
+    *available = isAvailable;
+    RTC_DLOG(INFO) << "output: " << isAvailable;
+    return 0;
+  }
+
+  int32_t AudioDeviceModuleMac::MaxMicrophoneVolume(uint32_t* maxVolume) const {
+    CHECKinitialized_();
+    uint32_t maxVol(0);
+    if (audio_device_->MaxMicrophoneVolume(maxVol) == -1) {
+      return -1;
+    }
+    *maxVolume = maxVol;
+    return 0;
+  }
+
+  int32_t AudioDeviceModuleMac::MinMicrophoneVolume(uint32_t* minVolume) const {
+    CHECKinitialized_();
+    uint32_t minVol(0);
+    if (audio_device_->MinMicrophoneVolume(minVol) == -1) {
+      return -1;
+    }
+    *minVolume = minVol;
+    return 0;
+  }
+
+  int16_t AudioDeviceModuleMac::PlayoutDevices() {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    uint16_t nPlayoutDevices = audio_device_->PlayoutDevices();
+    RTC_DLOG(INFO) << "output: " << nPlayoutDevices;
+    return (int16_t)(nPlayoutDevices);
+  }
+
+  int32_t AudioDeviceModuleMac::SetPlayoutDevice(uint16_t index) {
+    RTC_DLOG(INFO) << __FUNCTION__ << "(" << index << ")";
+    CHECKinitialized_();
+    return audio_device_->SetPlayoutDevice(index);
+  }
+
+  int32_t AudioDeviceModuleMac::SetPlayoutDevice(WindowsDeviceType device) {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    return audio_device_->SetPlayoutDevice(device);
+  }
+
+  int32_t AudioDeviceModuleMac::PlayoutDeviceName(
+      uint16_t index,
+      char name[kAdmMaxDeviceNameSize],
+      char guid[kAdmMaxGuidSize]) {
+    RTC_DLOG(INFO) << __FUNCTION__ << "(" << index << ", ...)";
+    CHECKinitialized_();
+    if (name == NULL) {
+      return -1;
+    }
+    if (audio_device_->PlayoutDeviceName(index, name, guid) == -1) {
+      return -1;
+    }
+    if (name != NULL) {
+      RTC_DLOG(INFO) << "output: name = " << name;
+    }
+    if (guid != NULL) {
+      RTC_DLOG(INFO) << "output: guid = " << guid;
+    }
+    return 0;
+  }
+
+  int32_t AudioDeviceModuleMac::RecordingDeviceName(
+      uint16_t index,
+      char name[kAdmMaxDeviceNameSize],
+      char guid[kAdmMaxGuidSize]) {
+    RTC_DLOG(INFO) << __FUNCTION__ << "(" << index << ", ...)";
+    CHECKinitialized_();
+    if (name == NULL) {
+      return -1;
+    }
+    if (audio_device_->RecordingDeviceName(index, name, guid) == -1) {
+      return -1;
+    }
+    if (name != NULL) {
+      RTC_DLOG(INFO) << "output: name = " << name;
+    }
+    if (guid != NULL) {
+      RTC_DLOG(INFO) << "output: guid = " << guid;
+    }
+    return 0;
+  }
+
+  int16_t AudioDeviceModuleMac::RecordingDevices() {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    uint16_t nRecordingDevices = audio_device_->RecordingDevices();
+    RTC_DLOG(INFO) << "output: " << nRecordingDevices;
+    return (int16_t)nRecordingDevices;
+  }
+
+  int32_t AudioDeviceModuleMac::SetRecordingDevice(uint16_t index) {
+    RTC_DLOG(INFO) << __FUNCTION__ << "(" << index << ")";
+    CHECKinitialized_();
+    return audio_device_->SetRecordingDevice(index);
+  }
+
+  int32_t AudioDeviceModuleMac::SetRecordingDevice(WindowsDeviceType device) {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    return audio_device_->SetRecordingDevice(device);
+  }
+
+  int32_t AudioDeviceModuleMac::InitPlayout() {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    if (PlayoutIsInitialized()) {
+      return 0;
+    }
+    int32_t result = audio_device_->InitPlayout();
+    RTC_DLOG(INFO) << "output: " << result;
+    RTC_HISTOGRAM_BOOLEAN("WebRTC.Audio.InitPlayoutSuccess",
+                          static_cast<int>(result == 0));
+    return result;
+  }
+
+  int32_t AudioDeviceModuleMac::InitRecording() {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    if (RecordingIsInitialized()) {
+      return 0;
+    }
+    int32_t result = audio_device_->InitRecording();
+    RTC_DLOG(INFO) << "output: " << result;
+    RTC_HISTOGRAM_BOOLEAN("WebRTC.Audio.InitRecordingSuccess",
+                          static_cast<int>(result == 0));
+    return result;
+  }
+
+  bool AudioDeviceModuleMac::PlayoutIsInitialized() const {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized__BOOL();
+    return audio_device_->PlayoutIsInitialized();
+  }
+
+  bool AudioDeviceModuleMac::RecordingIsInitialized() const {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized__BOOL();
+    return audio_device_->RecordingIsInitialized();
+  }
+
+  int32_t AudioDeviceModuleMac::StartPlayout() {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    if (Playing()) {
+      return 0;
+    }
+    audio_device_buffer_.get()->StartPlayout();
+    int32_t result = audio_device_->StartPlayout();
+    RTC_DLOG(INFO) << "output: " << result;
+    RTC_HISTOGRAM_BOOLEAN("WebRTC.Audio.StartPlayoutSuccess",
+                          static_cast<int>(result == 0));
+    return result;
+  }
+
+  int32_t AudioDeviceModuleMac::StopPlayout() {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    int32_t result = audio_device_->StopPlayout();
+    audio_device_buffer_.get()->StopPlayout();
+    RTC_DLOG(INFO) << "output: " << result;
+    RTC_HISTOGRAM_BOOLEAN("WebRTC.Audio.StopPlayoutSuccess",
+                          static_cast<int>(result == 0));
+    return result;
+  }
+
+  bool AudioDeviceModuleMac::Playing() const {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized__BOOL();
+    return audio_device_->Playing();
+  }
+
+  int32_t AudioDeviceModuleMac::StartRecording() {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    if (Recording()) {
+      return 0;
+    }
+    audio_device_buffer_.get()->StartRecording();
+    int32_t result = audio_device_->StartRecording();
+    RTC_DLOG(INFO) << "output: " << result;
+    RTC_HISTOGRAM_BOOLEAN("WebRTC.Audio.StartRecordingSuccess",
+                          static_cast<int>(result == 0));
+    return result;
+  }
+
+  int32_t AudioDeviceModuleMac::StopRecording() {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized_();
+    int32_t result = audio_device_->StopRecording();
+    audio_device_buffer_.get()->StopRecording();
+    RTC_DLOG(INFO) << "output: " << result;
+    RTC_HISTOGRAM_BOOLEAN("WebRTC.Audio.StopRecordingSuccess",
+                          static_cast<int>(result == 0));
+    return result;
+  }
+
+  bool AudioDeviceModuleMac::Recording() const {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized__BOOL();
+    return audio_device_->Recording();
+  }
+
+  int32_t AudioDeviceModuleMac::RegisterAudioCallback(
+      AudioTransport* audioCallback) {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    return audio_device_buffer_.get()->RegisterAudioCallback(audioCallback);
+  }
+
+  int32_t AudioDeviceModuleMac::PlayoutDelay(uint16_t* delayMS) const {
+    CHECKinitialized_();
+    uint16_t delay = 0;
+    if (audio_device_->PlayoutDelay(delay) == -1) {
+      RTC_LOG(LERROR) << "failed to retrieve the playout delay";
+      return -1;
+    }
+    *delayMS = delay;
+    return 0;
+  }
+
+  bool AudioDeviceModuleMac::BuiltInAECIsAvailable() const {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized__BOOL();
+    bool isAvailable = audio_device_->BuiltInAECIsAvailable();
+    RTC_DLOG(INFO) << "output: " << isAvailable;
+    return isAvailable;
+  }
+
+  int32_t AudioDeviceModuleMac::EnableBuiltInAEC(bool enable) {
+    RTC_DLOG(INFO) << __FUNCTION__ << "(" << enable << ")";
+    CHECKinitialized_();
+    int32_t ok = audio_device_->EnableBuiltInAEC(enable);
+    RTC_DLOG(INFO) << "output: " << ok;
+    return ok;
+  }
+
+  bool AudioDeviceModuleMac::BuiltInAGCIsAvailable() const {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized__BOOL();
+    bool isAvailable = audio_device_->BuiltInAGCIsAvailable();
+    RTC_DLOG(INFO) << "output: " << isAvailable;
+    return isAvailable;
+  }
+
+  int32_t AudioDeviceModuleMac::EnableBuiltInAGC(bool enable) {
+    RTC_DLOG(INFO) << __FUNCTION__ << "(" << enable << ")";
+    CHECKinitialized_();
+    int32_t ok = audio_device_->EnableBuiltInAGC(enable);
+    RTC_DLOG(INFO) << "output: " << ok;
+    return ok;
+  }
+
+  bool AudioDeviceModuleMac::BuiltInNSIsAvailable() const {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    CHECKinitialized__BOOL();
+    bool isAvailable = audio_device_->BuiltInNSIsAvailable();
+    RTC_DLOG(INFO) << "output: " << isAvailable;
+    return isAvailable;
+  }
+
+  int32_t AudioDeviceModuleMac::EnableBuiltInNS(bool enable) {
+    RTC_DLOG(INFO) << __FUNCTION__ << "(" << enable << ")";
+    CHECKinitialized_();
+    int32_t ok = audio_device_->EnableBuiltInNS(enable);
+    RTC_DLOG(INFO) << "output: " << ok;
+    return ok;
+  }
+
+  int32_t AudioDeviceModuleMac::GetPlayoutUnderrunCount() const {
+    // Don't log here, as this method can be called very often.
+    CHECKinitialized_();
+    int32_t ok = audio_device_->GetPlayoutUnderrunCount();
+    return ok;
+  }
+
+#if defined(WEBRTC_IOS)
+  void AudioDeviceModuleMac::OnDeliverRecordedExternalData(CMSampleBufferRef sample_buffer) {
+    audio_device_->OnDeliverRecordedExternalData(sample_buffer);
+  }
+
+  int AudioDeviceModuleMac::GetPlayoutAudioParameters(
+      AudioParameters* params) const {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    int r = audio_device_->GetPlayoutAudioParameters(params);
+    RTC_DLOG(INFO) << "output: " << r;
+    return r;
+  }
+
+  int AudioDeviceModuleMac::GetRecordAudioParameters(
+      AudioParameters* params) const {
+    RTC_DLOG(INFO) << __FUNCTION__;
+    int r = audio_device_->GetRecordAudioParameters(params);
+    RTC_DLOG(INFO) << "output: " << r;
+    return r;
+  }
+#endif  // WEBRTC_IOS
+}
+}
diff --git a/tools_webrtc/libs/generate_licenses.py b/tools_webrtc/libs/generate_licenses.py
index a23123e760..36aae5964d 100755
--- a/tools_webrtc/libs/generate_licenses.py
+++ b/tools_webrtc/libs/generate_licenses.py
@@ -77,2 +77,3 @@ LIB_TO_LICENSES_DICT = {
     'spl_sqrt_floor': ['common_audio/third_party/spl_sqrt_floor/LICENSE'],
+    'webrtc (additions made by pixiv Inc.)': ['LICENSE.pixiv'],
 
@@ -217,2 +218,3 @@ class LicenseBuilder(object):
         license_libs = sorted(third_party_libs)
+        license_libs.insert(0, 'webrtc (additions made by pixiv Inc.)')
         license_libs.insert(0, 'webrtc')
diff --git a/LICENSE.pixiv b/LICENSE.pixiv
new file mode 100644
index 0000000000..cb034c1e54
--- /dev/null
+++ b/LICENSE.pixiv
@@ -0,0 +1,235 @@
+The additions made by pixiv Inc. is provided with the following terms:
+
+Copyright 2019 pixiv Inc. All Rights Reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are
+met:
+
+  * Redistributions of source code must retain the above copyright
+    notice, this list of conditions and the following disclaimer.
+
+  * Redistributions in binary form must reproduce the above copyright
+    notice, this list of conditions and the following disclaimer in
+    the documentation and/or other materials provided with the
+    distribution.
+
+  * Neither the name of Google nor the names of its contributors may
+    be used to endorse or promote products derived from this software
+    without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+They are also available under the following terms:
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
